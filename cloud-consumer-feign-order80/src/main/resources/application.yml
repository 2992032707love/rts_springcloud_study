server:
  port: 80

spring:
  application:
    name: cloud-consumer-openfeign-order
  cloud:
    consul:
      port: 8500
      host: localhost
      discovery:
        service-name: ${spring.application.name}
        prefer-agent-address: true #优先使用服务ip进行注册cloud-consumer-openfeign-order
    openfeign:
      client:
        config:
          default:
            # 连接超时时间
            connectTimeout: 3000
            # 读取超时时间
            readTimeout: 3000
          cloud-payment-service:
            # 连接超时时间
            connectTimeout: 20000
            # 读取超时时间
            readTimeout: 20000
      httpclient:
        hc5:
          enabled: true
      compression:
        request:
          enabled: true
          mime-types: text/xml,application/xml,application/json #触发压缩数据类型
          min-request-size: 2048 #最小触发压缩的大小
        response:
          enabled: true
      # 开启circuitbreaker和分组激活spring.cloud.openfeign.circuitbreaker.enabled
      circuitbreaker:
        enabled: false
#        group:
#          enabled: false #没开分组永远不用分组的配置。精准优先、分组次之(开了分组)、默认最后
# feign日志以什么级别监控哪个接口
#logging:
#  level:
#    com:
#      rts:
#        apis:
#          TPayFeignApi: debug
logging:
  level:
    root: info
    com:
      rts: debug
  file:
    name: "D:/rts_springcloud_study/cloud-consumer-openfeign-order80.log"
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger- %msg%n"
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger- %msg%n"

# Resilience4j CircuitBreaker 按照次数：COUNT_BASED 的例子
#  6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。
#  等待5秒后，CircuitBreaker将自动从开启OPEN状态过度到半开HILF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  如还是异常CircuitBreaker 将重新进入开启OPEN状态:如正常将进入关闭CLOSE闭合状态恢复正常处理请求。

#resilience4j:
#  circuitbreaker: # 降级熔断
#    configs:
#      default:
#        failure-rate-threshold: 50 # 调用失败达到50%后打开断路器,超过失败请求百分比CircuitBreaker变为OPEN状态
#        sliding-window-type: COUNT_BASED # 滑动窗口类型
#        sliding-window-size: 6 # 滑动窗口大小 count_based6个请求 time_base6秒
#        minimum-number-of-calls: 6 # 每个滑动窗口的周期 断路器计算失败率或慢调用率之前所需的最小样本
#        automatic-transition-from-open-to-half-open-enabled: true # 开始过度到半开状态
#        wait-duration-in-open-state: 5s # 从开启到半开启需要5s
#        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许通过的最大请求数，默认值为10.在半开状态下，CircuitBreaker将允许最多 个请求通过，如果其中有任何一个请求失败，CircuitBreaker将重新进入开启状态。
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default



# Resilience4j CircuitBreaker 按照时间： TIME_BASED 的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级、就走降级逻镇
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 # 调用失败达到50%后打开断路器
#        slow-call-duration-threshold: 2s # 慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例
#        slow-call-rate-threshold: 30 # 慢调用百分比峰值
#        sliding-window-type: time_based # 滑动窗口类型
#        sliding-window-size: 2 # 滑动窗口大小  time_base 2秒
#        minimum-number-of-calls: 2 # 每个滑动窗口的周期 断路器计算失败率或者慢调用之前所需的最小样本
##        automatic-transition-from-open-to-half-open-enabled: true # 开始过度到半开状态
#        wait-duration-in-open-state: 5s # 从开启到半开启需要5s
#        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许通过的最大请求数
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        base-config: default

### resilience4j bulkhead的例子
#resilience4j:
#  bulkhead: # 信号量舱壁
#    configs:
#      default:
#        max-concurrent-calls: 2 # 隔离允许并发线程执行的最大数量
#        max-wait-duration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底fallback
#    instances:
#      cloud-payment-service:
#        base-config: default
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s


### resilience4j bulkhead THREADPOOL的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s
#  thread-pool-bulkhead:
#    configs:
#      default:
#        core-thread-pool-size: 1
#        max-thread-pool-size: 1
#        queue-capacity: 1
#    instances:
#      cloud-payment-service:
#        base-config: default
# spring.cloud.openfeign.circuitbreaker.group.enabled 请设置为false 新启线程和原来的主线程脱离

# Resilience4j ratelimiter 限流的例子
#resilience4j:
#  ratelimiter:
#    configs:
#      default:
#        limit-for-period: 2 # 在一次刷新周期内，允许执行的最大请求数
#        limit-refresh-period: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为LimitForPeriod
#        timeout-duration: 1 # 线程等待权限的默认等待时间
#    instances:
#      cloud-payment-service:
#        base-config: default

# zipkin图形展现地址和采样率设置
#management:
#  zipkin:
#    tracing:
#      endpoint: http://192.168.204.122:9411/api/v2/spans
#  tracing:
#    sampling:
#      probability: 1.0 # 采样率,默认值0.1(就是10%的链路会被记录下来)